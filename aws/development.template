AWSTemplateFormatVersion: '2010-09-09'
Description: '1904labs Geospatial Hackathon Cloudformation Template'
# aws cloudformation create-stack --stack-name farmapp --template-body file://development.template

Parameters:
  GITHUBREPO:
    Description: The owner and repository name. For example, octocat/Hello-World.
    Type: String
    Default: 1904labs/geostack-farm-app

  GITBRANCH:
    Type: String
    Description: the branch to checkout
    Default: master

Resources:
  ElasticIpv4:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2Instance

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m4.large
      ImageId: ami-08b26b905b0d17561
      KeyName: 1904key
      SecurityGroups:
      - Ref: SshSecurityGroup
      - Ref: AppSecurityGroup
      - Ref: GsSecurityGroup
      - Ref: PgSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub:
          - |
            #!/bin/bash -x
            yum update -y
            yum install -y git ec2-instance-connect
            mkdir -p /usr/local/bin
            curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            usermod -a -G docker ec2-user
            sudo -su ec2-user -- <<EOF
            mkdir -p /home/user/farm-app
            git clone https://github.com/${GITHUB_REPOSITORY}.git /home/ec2-user/farm-app
            git checkout ${GIT_BRANCH}
            cd /home/ec2-user/farm-app
            /usr/local/bin/docker-compose -f ./aws/development-compose.yaml -p farm-app up -d
            EOF
          - GITHUB_REPOSITORY: !Ref GITHUBREPO
            GIT_BRANCH: !Ref GITBRANCH

  SshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: '0.0.0.0/0'

  PgSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Postgis access via port 5432
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: '0.0.0.0/0'

  GsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable GeoServer access via port 8080
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: '0.0.0.0/0'

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable webapp access via port 8080
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8000'
        ToPort: '8000'
        CidrIp: '0.0.0.0/0'
